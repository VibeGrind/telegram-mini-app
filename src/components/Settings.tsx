import { useState, useEffect } from 'react'
import {
  List,
  Section,
  Cell,
  Switch,
  Title,
  Caption,
  IconButton,
} from '@telegram-apps/telegram-ui'
import './Settings.css'

interface SettingsProps {
  isOpen: boolean
  onClose: () => void
}

export default function Settings({ isOpen, onClose }: SettingsProps) {
  const [autoPlayMedia, setAutoPlayMedia] = useState(true)
  const [autoDownloadPhotos, setAutoDownloadPhotos] = useState(true)
  const [autoDownloadVideos, setAutoDownloadVideos] = useState(false)

  const [enterToSend, setEnterToSend] = useState(true)
  const [showOnlineStatus, setShowOnlineStatus] = useState(true)

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = ''
    }
    return () => {
      document.body.style.overflow = ''
    }
  }, [isOpen])

  if (!isOpen) return null

  return (
    <>
      <div
        className="settings-overlay"
        onClick={onClose}
        style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.4)',
          zIndex: 1000,
        }}
      />
      <div
        className="settings-content"
        style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'var(--tgui--bg_color, #fff)',
          zIndex: 1001,
          overflowY: 'auto',
        }}
      >
        <div className="settings-header" style={{
          display: 'flex',
          alignItems: 'center',
          padding: '12px 16px',
          borderBottom: '1px solid var(--tgui--secondary_bg_color, #e0e0e0)',
          position: 'sticky',
          top: 0,
          backgroundColor: 'var(--tgui--bg_color, #fff)',
          zIndex: 10,
        }}>
          <IconButton mode="plain" size="m" onClick={onClose}>
            ‚Üê
          </IconButton>
          <Title level="2" style={{ margin: 0, marginLeft: '12px' }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</Title>
        </div>
      <div className="settings">
        <List>
          {/* Privacy */}
          <Section header="–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å">
            <Cell
              Component="label"
              before={<span className="settings-icon">üëÅÔ∏è</span>}
              after={
                <Switch
                  checked={showOnlineStatus}
                  onChange={(e) => setShowOnlineStatus(e.target.checked)}
                />
              }
            >
              –°—Ç–∞—Ç—É—Å "–û–Ω–ª–∞–π–Ω"
            </Cell>
          </Section>

          {/* Data and Storage */}
          <Section header="–î–∞–Ω–Ω—ã–µ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ">
            <Cell
              Component="label"
              before={<span className="settings-icon">üì∑</span>}
              after={
                <Switch
                  checked={autoDownloadPhotos}
                  onChange={(e) => setAutoDownloadPhotos(e.target.checked)}
                />
              }
            >
              <div className="settings-cell-content">
                <div>–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ</div>
                <Caption level="2">–ó–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</Caption>
              </div>
            </Cell>
            <Cell
              Component="label"
              before={<span className="settings-icon">üé¨</span>}
              after={
                <Switch
                  checked={autoDownloadVideos}
                  onChange={(e) => setAutoDownloadVideos(e.target.checked)}
                />
              }
            >
              <div className="settings-cell-content">
                <div>–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ</div>
                <Caption level="2">–ó–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</Caption>
              </div>
            </Cell>
            <Cell
              Component="label"
              before={<span className="settings-icon">‚ñ∂Ô∏è</span>}
              after={
                <Switch
                  checked={autoPlayMedia}
                  onChange={(e) => setAutoPlayMedia(e.target.checked)}
                />
              }
            >
              –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–µ–¥–∏–∞
            </Cell>
            <Cell
              before={<span className="settings-icon">üíæ</span>}
              after={<span className="settings-chevron">‚Ä∫</span>}
            >
              –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            </Cell>
          </Section>


          {/* Chat Behavior */}
          <Section header="–ü–æ–≤–µ–¥–µ–Ω–∏–µ —á–∞—Ç–æ–≤">
            <Cell
              Component="label"
              before={<span className="settings-icon">‚èé</span>}
              after={
                <Switch
                  checked={enterToSend}
                  onChange={(e) => setEnterToSend(e.target.checked)}
                />
              }
            >
              <div className="settings-cell-content">
                <div>Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</div>
                <Caption level="2">Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</Caption>
              </div>
            </Cell>
          </Section>

          {/* Language */}
          <Section header="–Ø–∑—ã–∫">
            <Cell
              before={<span className="settings-icon">üåê</span>}
              after={
                <div className="settings-value">
                  –†—É—Å—Å–∫–∏–π <span className="settings-chevron">‚Ä∫</span>
                </div>
              }
            >
              –Ø–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            </Cell>
          </Section>
        </List>

      </div>
      </div>
    </>
  )
}
